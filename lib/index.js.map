{"version":3,"file":"index.js","sources":["../src/utils/pick-linked-entities.js","../src/utils/to-query.js","../src/utils/parse-query.js","../src/cleanup-templated-href.js","../src/compute-hal-request-url.js","../src/prepare-hal-response.js","../src/unwrap-embedded-list.js","../src/hal-resource.js"],"sourcesContent":["// @flow\nimport type { HALEntity } from '../hal-resource-types';\n\nexport const pickLinkedEntities = (entities: HALEntity[], key: string): Promise<HALEntity[]> =>\n    Promise.all(entities.filter(entity => entity[key]).map(entity => (entity[key]: any).getOne()));\n\nexport const pickLinkedEntitiesGroups = (\n    entities: HALEntity[],\n    key: string,\n): Promise<HALEntity[][]> =>\n    Promise.all(entities.filter(entity => entity[key]).map(entity => (entity[key]: any).getList()));\n","// @flow\nexport function toQuery(obj?: { [string]: mixed } | void | null): string {\n    if (!obj) {\n        return '';\n    }\n    return Object.keys(obj)\n        .filter(key => obj && obj[key] !== undefined && obj[key] !== null)\n        .map(key => obj && [key, String(obj[key])].map(encodeURIComponent).join('='))\n        .join('&');\n}\n","// @flow\n\ntype QueryParam = [string, string];\n\nexport function parseQuery(query?: string | void | null): QueryParam[] {\n    if (!query) {\n        return [];\n    }\n    return query\n        .split(/[&?]/)\n        .filter(Boolean)\n        .map(keyVal => keyVal.split('='))\n        .map(([key, val = '']) => [key, decodeURIComponent(val)]);\n}\n\nexport function getQueryParamsByKey(\n    targetKey: string,\n): (query?: string | void | null) => QueryParam[] {\n    return query => parseQuery(query).filter(([key]) => key === targetKey);\n}\n\nexport function getQueryValsByKey(targetKey: string): (query?: string | void | null) => string[] {\n    return query => getQueryParamsByKey(targetKey)(query).map(([, val]) => val);\n}\n","// @flow\nexport function cleanupTemplatedHref(href: string | void | null): string {\n    return href ? href.replace(/{[^}]*}/g, '') : '';\n}\n","// @flow\nimport { toQuery } from './utils';\nimport { cleanupTemplatedHref } from './cleanup-templated-href';\n\nexport function computeHALRequestURL(endpointHref: string) {\n    const endpointURI = cleanupTemplatedHref(endpointHref);\n    return function computeURL(\n        idOrQuery?: string | { [string]: mixed },\n        query?: { [string]: mixed },\n    ): string {\n        if (idOrQuery && typeof idOrQuery === 'object') {\n            // query is passed in place of id\n            return computeURL(undefined, idOrQuery);\n        }\n        const id = idOrQuery;\n        if (!id) {\n            // endpointURI is the final URL\n            return `${endpointURI}?${toQuery(query)}`;\n        }\n        if (isURL(id)) {\n            return `${id}?${toQuery(query)}`;\n        }\n        return `${endpointURI}/${id}?${toQuery(query)}`;\n    };\n}\n\nfunction isURL(str: string | void | null): boolean {\n    return (str || '').indexOf('://') !== -1;\n}\n","// @flow\nimport type { HALResponse, HALEntity, HALEndpointFactory } from './hal-resource-types';\nimport { cleanupTemplatedHref } from './cleanup-templated-href';\n\nexport function prepareHALResponse(endpointFactory: HALEndpointFactory): HALResponse => HALEntity {\n    const mapResponse = (response = {}) => {\n        const {\n            id, _embedded, _links, ...fields\n        } = response;\n        const { self: { href: selfHref } = {} } = _links || {};\n        const entityBase: HALEntity = {\n            get id() {\n                return cleanupTemplatedHref(selfHref);\n            },\n        };\n        const entityDescriptors: PropertyDescriptorMap = Object.assign(\n            {\n                _id: { value: retrieveShortIdFromHref(selfHref) },\n                _links: { value: _links },\n            },\n            ...computeFields(fields),\n            ...computeEmbedded(_embedded),\n            ...computeLinkedResources(_links),\n        );\n        return Object.defineProperties(entityBase, entityDescriptors);\n    };\n    return mapResponse;\n\n    function computeEmbedded(embedded): PropertyDescriptorMap[] {\n        const {\n            id, _links, _embedded, ...embeddedFields\n        } = embedded || {};\n        return Object.keys(embeddedFields).map(key => ({\n            [key]: {\n                value: computeFieldValue(embeddedFields[key] || ''),\n                enumerable: true,\n            },\n        }));\n    }\n\n    function computeLinkedResources({ self, ...links } = {}): PropertyDescriptorMap[] {\n        return links\n            ? Object.keys(links).map(key => ({\n                [key]: {\n                    value: endpointFactory(links[key].href),\n                },\n            }))\n            : [];\n    }\n\n    function computeFields(fields): PropertyDescriptorMap[] {\n        return Object.keys(fields).map(key => ({\n            [key]: {\n                value: computeFieldValue(fields[key]),\n                enumerable: true,\n            },\n        }));\n    }\n\n    function computeFieldValue(val: HALResponse | HALResponse[] | string | number | boolean) {\n        if (Array.isArray(val)) {\n            return val.map(computeFieldValue);\n        }\n        if (val && typeof val === 'object') {\n            return mapResponse(val);\n        }\n        return val;\n    }\n}\n\nfunction retrieveShortIdFromHref(href: string | void | null): string {\n    const cleanHref = cleanupTemplatedHref(href);\n    return cleanHref.substr(cleanHref.lastIndexOf('/') + 1);\n}\n","// @flow\nimport type { HALResponse } from './hal-resource-types';\n\nexport function unwrapEmbeddedList(obj?: HALResponse | void | null): HALResponse[] {\n    if (!obj || !obj._embedded) {\n        return [];\n    }\n    const embed = obj._embedded;\n    const [onlyKey] = Object.keys(embed);\n    return Array.isArray(embed[onlyKey]) ? embed[onlyKey] : [];\n}\n","// @flow\nimport type { HALEndpointFactory } from './hal-resource-types';\nimport { computeHALRequestURL } from './compute-hal-request-url';\nimport { prepareHALResponse } from './prepare-hal-response';\nimport { unwrapEmbeddedList } from './unwrap-embedded-list';\n\nexport function HALResource(doFetch: typeof fetch): HALEndpointFactory {\n    const endpointFactory = (endpointURI) => {\n        const fetchJSON = doFetchJSON(doFetch);\n        const computeURL = computeHALRequestURL(endpointURI);\n        return {\n            async getList({ sort: { field: sortField, order } = {}, ...query } = {}) {\n                const sort = sortField ? `${sortField},${order.toLowerCase()}` : undefined;\n                const response = await fetchJSON(computeURL({ ...query, sort }));\n                const list = unwrapEmbeddedList(await response.json());\n                return list.map(prepareHALResponse(endpointFactory));\n            },\n            async getOne(id, query) {\n                const response = await fetchJSON(computeURL(id, query));\n                return prepareHALResponse(endpointFactory)(await response.json());\n            },\n            async create(data) {\n                const response = await fetchJSON(computeURL(), {\n                    method: 'POST',\n                    body: JSON.stringify(data || {}),\n                });\n                return prepareHALResponse(endpointFactory)(await response.json());\n            },\n            async delete(id) {\n                await fetchJSON(computeURL(id), { method: 'DELETE' });\n            },\n            async update(id, data) {\n                const response = await fetchJSON(computeURL(id), {\n                    method: 'PATCH',\n                    body: JSON.stringify(data || {}),\n                });\n                return prepareHALResponse(endpointFactory)(await response.json());\n            },\n            rawGet(id, query) {\n                return fetchJSON(computeURL(id, query));\n            },\n            rawPost(data) {\n                return fetchJSON(computeURL(), {\n                    method: 'POST',\n                    body: JSON.stringify(data || {}),\n                });\n            },\n        };\n    };\n    return endpointFactory;\n}\n\nfunction doFetchJSON(doFetch: typeof fetch): typeof fetch {\n    return (url, options) => {\n        const opts = {\n            ...options,\n            headers: {\n                ...(options && options.headers ? options.headers : {}),\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                ...(typeof window === 'object'\n                && window\n                && window.location.host\n                && window.location.host.indexOf('localhost') !== 0\n                    ? {\n                        'X-Forwarded-Host': window.location.host,\n                    }\n                    : {}),\n            },\n        };\n        return doFetch(url, opts);\n    };\n}\n"],"names":["pickLinkedEntities","entities","key","Promise","all","filter","entity","map","getOne","pickLinkedEntitiesGroups","getList","toQuery","obj","Object","keys","undefined","String","encodeURIComponent","join","parseQuery","query","split","Boolean","keyVal","val","decodeURIComponent","getQueryParamsByKey","targetKey","getQueryValsByKey","cleanupTemplatedHref","href","replace","computeHALRequestURL","endpointHref","endpointURI","computeURL","idOrQuery","id","isURL","str","indexOf","prepareHALResponse","endpointFactory","mapResponse","response","_embedded","_links","fields","self","selfHref","entityBase","entityDescriptors","assign","value","retrieveShortIdFromHref","computeFields","computeEmbedded","computeLinkedResources","defineProperties","embedded","embeddedFields","computeFieldValue","links","Array","isArray","cleanHref","substr","lastIndexOf","unwrapEmbeddedList","embed","onlyKey","HALResource","doFetch","fetchJSON","doFetchJSON","sort","sortField","field","order","toLowerCase","json","list","data","JSON","stringify","method","url","options","opts","headers","window","location","host"],"mappings":";;;;IAGaA,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAwBC,GAAxB;WAC9BC,QAAQC,GAAR,CAAYH,SAASI,MAAT,CAAgB;eAAUC,OAAOJ,GAAP,CAAV;KAAhB,EAAuCK,GAAvC,CAA2C;eAAWD,OAAOJ,GAAP,CAAD,CAAmBM,MAAnB,EAAV;KAA3C,CAAZ,CAD8B;CAA3B;;;AAGP,IAAaC,2BAA2B,SAA3BA,wBAA2B,CACpCR,QADoC,EAEpCC,GAFoC;WAIpCC,QAAQC,GAAR,CAAYH,SAASI,MAAT,CAAgB;eAAUC,OAAOJ,GAAP,CAAV;KAAhB,EAAuCK,GAAvC,CAA2C;eAAWD,OAAOJ,GAAP,CAAD,CAAmBQ,OAAnB,EAAV;KAA3C,CAAZ,CAJoC;CAAjC;;ACLA,SAASC,OAAT,CAAiBC,GAAjB,EAAkE;QACjE,CAACA,GAAL,EAAU;eACC,EAAP;;WAEGC,OAAOC,IAAP,CAAYF,GAAZ,EACFP,MADE,CACK;eAAOO,OAAOA,IAAIV,GAAJ,MAAaa,SAApB,IAAiCH,IAAIV,GAAJ,MAAa,IAArD;KADL,EAEFK,GAFE,CAEE;eAAOK,OAAO,CAACV,GAAD,EAAMc,OAAOJ,IAAIV,GAAJ,CAAP,CAAN,EAAwBK,GAAxB,CAA4BU,kBAA5B,EAAgDC,IAAhD,CAAqD,GAArD,CAAd;KAFF,EAGFA,IAHE,CAGG,GAHH,CAAP;;;ACDG,SAASC,UAAT,CAAoBC,KAApB,EAAgE;QAC/D,CAACA,KAAL,EAAY;eACD,EAAP;;WAEGA,MACFC,KADE,CACI,MADJ,EAEFhB,MAFE,CAEKiB,OAFL,EAGFf,GAHE,CAGE;eAAUgB,OAAOF,KAAP,CAAa,GAAb,CAAV;KAHF,EAIFd,GAJE,CAIE;YAAEL,GAAF;;YAAOsB,GAAP,yBAAa,EAAb;eAAqB,CAACtB,GAAD,EAAMuB,mBAAmBD,GAAnB,CAAN,CAArB;KAJF,CAAP;;;AAOJ,AAAO,SAASE,mBAAT,CACHC,SADG,EAE2C;WACvC;eAASR,WAAWC,KAAX,EAAkBf,MAAlB,CAAyB;gBAAEH,GAAF;mBAAWA,QAAQyB,SAAnB;SAAzB,CAAT;KAAP;;;AAGJ,AAAO,SAASC,iBAAT,CAA2BD,SAA3B,EAA0F;WACtF;eAASD,oBAAoBC,SAApB,EAA+BP,KAA/B,EAAsCb,GAAtC,CAA0C;gBAAIiB,GAAJ;mBAAaA,GAAb;SAA1C,CAAT;KAAP;;;ACrBG,SAASK,oBAAT,CAA8BC,IAA9B,EAAkE;WAC9DA,OAAOA,KAAKC,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAP,GAAsC,EAA7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEG,SAASC,oBAAT,CAA8BC,YAA9B,EAAoD;QACjDC,cAAcL,qBAAqBI,YAArB,CAApB;WACO,SAASE,UAAT,CACHC,SADG,EAEHhB,KAFG,EAGG;YACFgB,aAAa,QAAOA,SAAP,yCAAOA,SAAP,OAAqB,QAAtC,EAAgD;;mBAErCD,WAAWpB,SAAX,EAAsBqB,SAAtB,CAAP;;YAEEC,KAAKD,SAAX;YACI,CAACC,EAAL,EAAS;;mBAEKH,WAAV,SAAyBvB,QAAQS,KAAR,CAAzB;;YAEAkB,MAAMD,EAAN,CAAJ,EAAe;mBACDA,EAAV,SAAgB1B,QAAQS,KAAR,CAAhB;;eAEMc,WAAV,SAAyBG,EAAzB,SAA+B1B,QAAQS,KAAR,CAA/B;KAhBJ;;;AAoBJ,SAASkB,KAAT,CAAeC,GAAf,EAAmD;WACxC,CAACA,OAAO,EAAR,EAAYC,OAAZ,CAAoB,KAApB,MAA+B,CAAC,CAAvC;;;ACvBG,SAASC,kBAAT,CAA4BC,eAA5B,EAA2F;QACxFC,cAAc,SAAdA,WAAc,GAAmB;YAAlBC,QAAkB,uEAAP,EAAO;YAE/BP,EAF+B,GAG/BO,QAH+B,CAE/BP,EAF+B;YAE3BQ,SAF2B,GAG/BD,QAH+B,CAE3BC,SAF2B;YAEhBC,MAFgB,GAG/BF,QAH+B,CAEhBE,MAFgB;YAELC,MAFK,2BAG/BH,QAH+B;;mBAIOE,UAAU,EAJjB;6BAI3BE,IAJ2B;;8CAIA,EAJA;YAIbC,QAJa,aAInBnB,IAJmB;;YAK7BoB,aAAwB;gBACtBb,EAAJ,GAAS;uBACER,qBAAqBoB,QAArB,CAAP;;SAFR;YAKME,oBAA2CtC,OAAOuC,MAAP,gBAC7C;iBACS,EAAEC,OAAOC,wBAAwBL,QAAxB,CAAT,EADT;oBAEY,EAAEI,OAAOP,MAAT;SAHiC,SAK1CS,cAAcR,MAAd,CAL0C,EAM1CS,gBAAgBX,SAAhB,CAN0C,EAO1CY,uBAAuBX,MAAvB,CAP0C,EAAjD;eASOjC,OAAO6C,gBAAP,CAAwBR,UAAxB,EAAoCC,iBAApC,CAAP;KAnBJ;WAqBOR,WAAP;;aAESa,eAAT,CAAyBG,QAAzB,EAA4D;oBAGpDA,YAAY,EAHwC;YAEpDtB,EAFoD,SAEpDA,EAFoD;YAEhDS,MAFgD,SAEhDA,MAFgD;YAExCD,SAFwC,SAExCA,SAFwC;YAE1Be,cAF0B;;eAIjD/C,OAAOC,IAAP,CAAY8C,cAAZ,EAA4BrD,GAA5B,CAAgC;;;qCAClCL,GADkC,IAC5B;uBACI2D,kBAAkBD,eAAe1D,GAAf,KAAuB,EAAzC,CADJ;4BAES;aAHmB;SAAhC,CAAP;;;aAQKuD,sBAAT,GAAkF;wFAA7B,EAA6B;;YAAhDT,IAAgD,SAAhDA,IAAgD;YAAvCc,KAAuC;;eACvEA,QACDjD,OAAOC,IAAP,CAAYgD,KAAZ,EAAmBvD,GAAnB,CAAuB;;;qCACpBL,GADoB,IACd;uBACIwC,gBAAgBoB,MAAM5D,GAAN,EAAW4B,IAA3B;aAFU;SAAvB,CADC,GAMD,EANN;;;aASKyB,aAAT,CAAuBR,MAAvB,EAAwD;eAC7ClC,OAAOC,IAAP,CAAYiC,MAAZ,EAAoBxC,GAApB,CAAwB;;;qCAC1BL,GAD0B,IACpB;uBACI2D,kBAAkBd,OAAO7C,GAAP,CAAlB,CADJ;4BAES;aAHW;SAAxB,CAAP;;;aAQK2D,iBAAT,CAA2BrC,GAA3B,EAAyF;YACjFuC,MAAMC,OAAN,CAAcxC,GAAd,CAAJ,EAAwB;mBACbA,IAAIjB,GAAJ,CAAQsD,iBAAR,CAAP;;YAEArC,OAAO,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAA1B,EAAoC;mBACzBmB,YAAYnB,GAAZ,CAAP;;eAEGA,GAAP;;;;AAIR,SAAS8B,uBAAT,CAAiCxB,IAAjC,EAAqE;QAC3DmC,YAAYpC,qBAAqBC,IAArB,CAAlB;WACOmC,UAAUC,MAAV,CAAiBD,UAAUE,WAAV,CAAsB,GAAtB,IAA6B,CAA9C,CAAP;;;ACrEG,SAASC,kBAAT,CAA4BxD,GAA5B,EAA4E;QAC3E,CAACA,GAAD,IAAQ,CAACA,IAAIiC,SAAjB,EAA4B;eACjB,EAAP;;QAEEwB,QAAQzD,IAAIiC,SAAlB;;uBACkBhC,OAAOC,IAAP,CAAYuD,KAAZ,CAL6D;QAKxEC,OALwE;;WAMxEP,MAAMC,OAAN,CAAcK,MAAMC,OAAN,CAAd,IAAgCD,MAAMC,OAAN,CAAhC,GAAiD,EAAxD;;;ACHG,SAASC,WAAT,CAAqBC,OAArB,EAAgE;QAC7D9B,kBAAkB,SAAlBA,eAAkB,CAACR,WAAD,EAAiB;YAC/BuC,YAAYC,YAAYF,OAAZ,CAAlB;YACMrC,aAAaH,qBAAqBE,WAArB,CAAnB;eACO;mBAAA;;mGACkE,EADlE;;yCACayC,IADb;0DACiD,EADjD;wBAC4BC,SAD5B,aACqBC,KADrB;wBACuCC,KADvC,aACuCA,KADvC;wBACwD1D,KADxD;;;;;;wCAAA,GAEcwD,YAAeA,SAAf,SAA4BE,MAAMC,WAAN,EAA5B,GAAoDhE,SAFlE;;2CAGwB0D,UAAUtC,wBAAgBf,KAAhB,IAAuBuD,UAAvB,IAAV,CAHxB;;;4CAAA;kDAIcP,kBAJd;;2CAIuCxB,SAASoC,IAAT,EAJvC;;;;wCAAA;qEAKQC,KAAK1E,GAAL,CAASkC,mBAAmBC,eAAnB,CAAT,CALR;;;;;;;;;;;;;;;;kBAAA;qGAOUL,EAPV,EAOcjB,KAPd;;;;;;;2CAQwBqD,UAAUtC,WAAWE,EAAX,EAAejB,KAAf,CAAV,CARxB;;;4CAAA;mDASQqB,mBAAmBC,eAAnB,CATR;;2CASkDE,SAASoC,IAAT,EATlD;;;;;;;;;;;;;;;;;;;;kBAAA;qGAWUE,IAXV;;;;;;;2CAYwBT,UAAUtC,YAAV,EAAwB;gDACnC,MADmC;8CAErCgD,KAAKC,SAAL,CAAeF,QAAQ,EAAvB;qCAFa,CAZxB;;;4CAAA;mDAgBQzC,mBAAmBC,eAAnB,CAhBR;;2CAgBkDE,SAASoC,IAAT,EAhBlD;;;;;;;;;;;;;;;;;;;;kBAAA;qGAkBU3C,EAlBV;;;;;;2CAmBOoC,UAAUtC,WAAWE,EAAX,CAAV,EAA0B,EAAEgD,QAAQ,QAAV,EAA1B,CAnBP;;;;;;;;;;;;;;;;kBAAA;qGAqBUhD,EArBV,EAqBc6C,IArBd;;;;;;;2CAsBwBT,UAAUtC,WAAWE,EAAX,CAAV,EAA0B;gDACrC,OADqC;8CAEvC8C,KAAKC,SAAL,CAAeF,QAAQ,EAAvB;qCAFa,CAtBxB;;;4CAAA;mDA0BQzC,mBAAmBC,eAAnB,CA1BR;;2CA0BkDE,SAASoC,IAAT,EA1BlD;;;;;;;;;;;;;;;;;;;;kBAAA,kBA4BI3C,EA5BJ,EA4BQjB,KA5BR,EA4Be;uBACPqD,UAAUtC,WAAWE,EAAX,EAAejB,KAAf,CAAV,CAAP;aA7BD;mBAAA,mBA+BK8D,IA/BL,EA+BW;uBACHT,UAAUtC,YAAV,EAAwB;4BACnB,MADmB;0BAErBgD,KAAKC,SAAL,CAAeF,QAAQ,EAAvB;iBAFH,CAAP;;SAhCR;KAHJ;WA0COxC,eAAP;;;AAGJ,SAASgC,WAAT,CAAqBF,OAArB,EAA0D;WAC/C,UAACc,GAAD,EAAMC,OAAN,EAAkB;YACfC,oBACCD,OADD;kCAGMA,WAAWA,QAAQE,OAAnB,GAA6BF,QAAQE,OAArC,GAA+C,EADvD;wBAEY,kBAFZ;gCAGoB;eACZ,QAAOC,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IACDA,MADC,IAEDA,OAAOC,QAAP,CAAgBC,IAFf,IAGDF,OAAOC,QAAP,CAAgBC,IAAhB,CAAqBpD,OAArB,CAA6B,WAA7B,MAA8C,CAH7C,GAIE;oCACsBkD,OAAOC,QAAP,CAAgBC;aALxC,GAOE,EAXV;UAFJ;eAgBOpB,QAAQc,GAAR,EAAaE,IAAb,CAAP;KAjBJ;;;;;;;;;;;"}